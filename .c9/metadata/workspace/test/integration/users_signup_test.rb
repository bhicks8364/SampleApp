{"filter":false,"title":"users_signup_test.rb","tooltip":"/test/integration/users_signup_test.rb","undoManager":{"mark":10,"position":10,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":1},"end":{"row":7,"column":0},"action":"remove","lines":["equire 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","  # test \"the truth\" do","  #   assert true","  # end","end",""]},{"start":{"row":0,"column":1},"end":{"row":14,"column":3},"action":"insert","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, user: { name:  \"\",","                               email: \"user@invalid\",","                               password:              \"foo\",","                               password_confirmation: \"bar\" }","    end","    assert_template 'users/new'","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":13,"column":5},"end":{"row":14,"column":0},"action":"insert","lines":["",""]},{"start":{"row":14,"column":0},"end":{"row":14,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":14,"column":2},"end":{"row":15,"column":0},"action":"insert","lines":["",""]},{"start":{"row":15,"column":0},"end":{"row":15,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":2},"end":{"row":16,"column":0},"action":"insert","lines":["",""]},{"start":{"row":16,"column":0},"end":{"row":16,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":2},"end":{"row":24,"column":5},"action":"insert","lines":["est \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post_via_redirect users_path, user: { name:  \"Example User\",","                                            email: \"user@example.com\",","                                            password:              \"password\",","                                            password_confirmation: \"password\" }","    end","    assert_template 'users/show'","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":2},"end":{"row":15,"column":3},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":32},"end":{"row":24,"column":0},"action":"insert","lines":["",""]},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":4},"end":{"row":24,"column":24},"action":"insert","lines":["assert is_logged_in?"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":27,"column":3},"action":"remove","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, user: { name:  \"\",","                               email: \"user@invalid\",","                               password:              \"foo\",","                               password_confirmation: \"bar\" }","    end","    assert_template 'users/new'","  end","  ","  test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post_via_redirect users_path, user: { name:  \"Example User\",","                                            email: \"user@example.com\",","                                            password:              \"password\",","                                            password_confirmation: \"password\" }","    end","    assert_template 'users/show'","    assert is_logged_in?","  end","  ","end"]},{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"insert","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, user: { name:  \"\",","                               email: \"user@invalid\",","                               password:              \"foo\",","                               password_confirmation: \"bar\" }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post_via_redirect users_path, user: { name:  \"Example User\",","                                            email: \"user@example.com\",","                                            password:              \"password\",","                                            password_confirmation: \"password\" }","    end","    # assert_template 'users/show'","    # assert is_logged_in?","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"remove","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, user: { name:  \"\",","                               email: \"user@invalid\",","                               password:              \"foo\",","                               password_confirmation: \"bar\" }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post_via_redirect users_path, user: { name:  \"Example User\",","                                            email: \"user@example.com\",","                                            password:              \"password\",","                                            password_confirmation: \"password\" }","    end","    # assert_template 'users/show'","    # assert is_logged_in?","  end","end"]},{"start":{"row":0,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["require 'test_helper'","","class UsersSignupTest < ActionDispatch::IntegrationTest","","  def setup","    ActionMailer::Base.deliveries.clear","  end","","  test \"invalid signup information\" do","    get signup_path","    assert_no_difference 'User.count' do","      post users_path, user: { name:  \"\",","                               email: \"user@invalid\",","                               password:              \"foo\",","                               password_confirmation: \"bar\" }","    end","    assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","  end","","  test \"valid signup information with account activation\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, user: { name:  \"Example User\",","                               email: \"user@example.com\",","                               password:              \"password\",","                               password_confirmation: \"password\" }","    end","    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\")","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?","    follow_redirect!","    assert_template 'users/show'","    assert is_logged_in?","  end","end"]}]}]]},"ace":{"folds":[],"scrolltop":306.77778816223145,"scrollleft":0,"selection":{"start":{"row":48,"column":3},"end":{"row":48,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":20,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1425560822967,"hash":"a09eb419dc03e213cdd4d3f699e3d7edec5f6db1"}