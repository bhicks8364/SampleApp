{"filter":false,"title":"password_resets_test.rb","tooltip":"/test/integration/password_resets_test.rb","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["require 'test_helper'","","class PasswordResetsTest < ActionDispatch::IntegrationTest","  # test \"the truth\" do","  #   assert true","  # end","end",""]},{"start":{"row":0,"column":0},"end":{"row":60,"column":3},"action":"insert","lines":["require 'test_helper'","","class PasswordResetsTest < ActionDispatch::IntegrationTest","  def setup","    ActionMailer::Base.deliveries.clear","    @user = users(:michael)","  end","","  test \"password resets\" do","    get new_password_reset_path","    assert_template 'password_resets/new'","    # Invalid email","    post password_resets_path, password_reset: { email: \"\" }","    assert_not flash.empty?","    assert_template 'password_resets/new'","    # Valid email","    post password_resets_path, password_reset: { email: @user.email }","    assert_not_equal @user.reset_digest, @user.reload.reset_digest","    assert_equal 1, ActionMailer::Base.deliveries.size","    assert_not flash.empty?","    assert_redirected_to root_url","    # Password reset form","    user = assigns(:user)","    # Wrong email","    get edit_password_reset_path(user.reset_token, email: \"\")","    assert_redirected_to root_url","    # Inactive user","    user.toggle!(:activated)","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_redirected_to root_url","    user.toggle!(:activated)","    # Right email, wrong token","    get edit_password_reset_path('wrong token', email: user.email)","    assert_redirected_to root_url","    # Right email, right token","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_template 'password_resets/edit'","    assert_select \"input[name=email][type=hidden][value=?]\", user.email","    # Invalid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"barquux\" }","    assert_select 'div#error_explanation'","    # Blank password","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"  \",","                  password_confirmation: \"foobar\" }","    assert_not flash.empty?","    assert_template 'password_resets/edit'","    # Valid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"foobaz\" }","    assert is_logged_in?","    assert_not flash.empty?","    assert_redirected_to user","  end","end"]}]}]]},"ace":{"folds":[],"scrolltop":480.1111240386963,"scrollleft":0,"selection":{"start":{"row":60,"column":3},"end":{"row":60,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":32,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1425562432447,"hash":"e3f36464d2674c1a33f29480aa60d8c1170a8c41"}