{"filter":false,"title":"password_resets_controller.rb","tooltip":"/app/controllers/password_resets_controller.rb","undoManager":{"mark":9,"position":9,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["class PasswordResetsController < ApplicationController","  def new","  end","","  def edit","  end","end",""]},{"start":{"row":0,"column":0},"end":{"row":20,"column":3},"action":"insert","lines":["class PasswordResetsController < ApplicationController","","  def new","  end","","  def create","    @user = User.find_by(email: params[:password_reset][:email].downcase)","    if @user","      @user.create_reset_digest","      @user.send_password_reset_email","      flash[:info] = \"Email sent with password reset instructions\"","      redirect_to root_url","    else","      flash.now[:danger] = \"Email address not found\"","      render 'new'","    end","  end","","  def edit","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":54},"end":{"row":1,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1,"column":0},"end":{"row":1,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":2},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":2,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":2},"end":{"row":2,"column":51},"action":"insert","lines":["before_action :get_user,   only: [:edit, :update]","  before_action :valid_user, only: [:edit, :update]"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":5},"end":{"row":23,"column":0},"action":"insert","lines":["",""]},{"start":{"row":23,"column":0},"end":{"row":23,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":2},"end":{"row":24,"column":0},"action":"insert","lines":["",""]},{"start":{"row":24,"column":0},"end":{"row":24,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":2},"end":{"row":25,"column":0},"action":"insert","lines":["",""]},{"start":{"row":25,"column":0},"end":{"row":25,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":25,"column":2},"end":{"row":26,"column":0},"action":"insert","lines":["",""]},{"start":{"row":26,"column":0},"end":{"row":26,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":24,"column":2},"end":{"row":36,"column":7},"action":"insert","lines":["private","","    def get_user","      @user = User.find_by(email: params[:email])","    end","","    # Confirms a valid user.","    def valid_user","      unless (@user && @user.activated? &&","              @user.authenticated?(:reset, params[:id]))","        redirect_to root_url","      end","    end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":39,"column":3},"action":"remove","lines":["class PasswordResetsController < ApplicationController","  before_action :get_user,   only: [:edit, :update]","  before_action :valid_user, only: [:edit, :update]","  ","","  def new","  end","","  def create","    @user = User.find_by(email: params[:password_reset][:email].downcase)","    if @user","      @user.create_reset_digest","      @user.send_password_reset_email","      flash[:info] = \"Email sent with password reset instructions\"","      redirect_to root_url","    else","      flash.now[:danger] = \"Email address not found\"","      render 'new'","    end","  end","","  def edit","  end","  ","  private","","    def get_user","      @user = User.find_by(email: params[:email])","    end","","    # Confirms a valid user.","    def valid_user","      unless (@user && @user.activated? &&","              @user.authenticated?(:reset, params[:id]))","        redirect_to root_url","      end","    end","  ","  ","end"]},{"start":{"row":0,"column":0},"end":{"row":69,"column":3},"action":"insert","lines":["class PasswordResetsController < ApplicationController","  before_action :get_user,         only: [:edit, :update]","  before_action :valid_user,       only: [:edit, :update]","  before_action :check_expiration, only: [:edit, :update]","","  def new","  end","","  def create","    @user = User.find_by(email: params[:password_reset][:email].downcase)","    if @user","      @user.create_reset_digest","      @user.send_password_reset_email","      flash[:info] = \"Email sent with password reset instructions\"","      redirect_to root_url","    else","      flash.now[:danger] = \"Email address not found\"","      render 'new'","    end","  end","","  def edit","  end","","  def update","    if password_blank?","      flash.now[:danger] = \"Password can't be blank\"","      render 'edit'","    elsif @user.update_attributes(user_params)","      log_in @user","      flash[:success] = \"Password has been reset.\"","      redirect_to @user","    else","      render 'edit'","    end","  end","","  private","","    def user_params","      params.require(:user).permit(:password, :password_confirmation)","    end","","    # Returns true if password is blank.","    def password_blank?","      params[:user][:password].blank?","    end","","    # Before filters","","    def get_user","      @user = User.find_by(email: params[:email])","    end","","    # Confirms a valid user.","    def valid_user","      unless (@user && @user.activated? &&","              @user.authenticated?(:reset, params[:id]))","        redirect_to root_url","      end","    end","","    # Checks expiration of reset token.","    def check_expiration","      if @user.password_reset_expired?","        flash[:danger] = \"Password reset has expired.\"","        redirect_to new_password_reset_url","      end","    end","end"]}]}]]},"ace":{"folds":[],"scrolltop":623.3889036178589,"scrollleft":0,"selection":{"start":{"row":69,"column":3},"end":{"row":69,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":44,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1425562366506,"hash":"6370ac0ce3d3a245833cd4e75e0eb4c89d31af93"}